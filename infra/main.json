{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.30.23.60470",
      "templateHash": "14234480879498665513"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 20,
      "metadata": {
        "description": "A unique prefix for all resources in this deployment. This should be 3-20 characters long:"
      }
    },
    "existingLogAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional: Existing Log Analytics Workspace Resource ID"
      }
    },
    "azureExistingAIProjectResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Use this parameter to use an existing AI project resource ID"
      }
    },
    "secondaryLocation": {
      "type": "string",
      "defaultValue": "eastus2",
      "minLength": 1,
      "metadata": {
        "description": "Secondary location for databases creation(example:eastus2):"
      }
    },
    "deploymentType": {
      "type": "string",
      "defaultValue": "GlobalStandard",
      "allowedValues": [
        "Standard",
        "GlobalStandard"
      ],
      "minLength": 1,
      "metadata": {
        "description": "GPT model deployment type:"
      }
    },
    "gptModelName": {
      "type": "string",
      "defaultValue": "gpt-4o-mini",
      "metadata": {
        "description": "Name of the GPT model to deploy:"
      }
    },
    "gptModelVersion": {
      "type": "string",
      "defaultValue": "2024-07-18",
      "metadata": {
        "description": "Version of the GPT model to deploy:"
      }
    },
    "azureOpenAIApiVersion": {
      "type": "string",
      "defaultValue": "2025-01-01-preview"
    },
    "azureAiAgentApiVersion": {
      "type": "string",
      "defaultValue": "2025-05-01"
    },
    "gptDeploymentCapacity": {
      "type": "int",
      "defaultValue": 150,
      "minValue": 10,
      "metadata": {
        "description": "Capacity of the GPT deployment:"
      }
    },
    "embeddingModel": {
      "type": "string",
      "defaultValue": "text-embedding-ada-002",
      "allowedValues": [
        "text-embedding-ada-002"
      ],
      "minLength": 1,
      "metadata": {
        "description": "Name of the Text Embedding model to deploy:"
      }
    },
    "embeddingDeploymentCapacity": {
      "type": "int",
      "defaultValue": 80,
      "minValue": 10,
      "metadata": {
        "description": "Capacity of the Embedding Model deployment"
      }
    },
    "imageTag": {
      "type": "string",
      "defaultValue": "latest"
    },
    "AZURE_LOCATION": {
      "type": "string",
      "defaultValue": ""
    },
    "aiDeploymentsLocation": {
      "type": "string",
      "metadata": {
        "azd": {
          "type": "location",
          "usageName": [
            "OpenAI.GlobalStandard.gpt-4o-mini,150",
            "OpenAI.GlobalStandard.text-embedding-ada-002,80"
          ]
        },
        "description": "Location for AI Foundry deployment. This is the location where the AI Foundry resources will be deployed."
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "ai": {
        "aiSearch": "srch-",
        "aiServices": "aisa-",
        "aiVideoIndexer": "avi-",
        "machineLearningWorkspace": "mlw-",
        "openAIService": "oai-",
        "botService": "bot-",
        "computerVision": "cv-",
        "contentModerator": "cm-",
        "contentSafety": "cs-",
        "customVisionPrediction": "cstv-",
        "customVisionTraining": "cstvt-",
        "documentIntelligence": "di-",
        "faceApi": "face-",
        "healthInsights": "hi-",
        "immersiveReader": "ir-",
        "languageService": "lang-",
        "speechService": "spch-",
        "translator": "trsl-",
        "aiHub": "aih-",
        "aiHubProject": "aihp-",
        "aiFoundry": "aif-",
        "aiFoundryProject": "aifp-"
      },
      "analytics": {
        "analysisServicesServer": "as",
        "databricksWorkspace": "dbw-",
        "dataExplorerCluster": "dec",
        "dataExplorerClusterDatabase": "dedb",
        "dataFactory": "adf-",
        "digitalTwin": "dt-",
        "streamAnalytics": "asa-",
        "synapseAnalyticsPrivateLinkHub": "synplh-",
        "synapseAnalyticsSQLDedicatedPool": "syndp",
        "synapseAnalyticsSparkPool": "synsp",
        "synapseAnalyticsWorkspaces": "synw",
        "dataLakeStoreAccount": "dls",
        "dataLakeAnalyticsAccount": "dla",
        "eventHubsNamespace": "evhns-",
        "eventHub": "evh-",
        "eventGridDomain": "evgd-",
        "eventGridSubscriptions": "evgs-",
        "eventGridTopic": "evgt-",
        "eventGridSystemTopic": "egst-",
        "hdInsightHadoopCluster": "hadoop-",
        "hdInsightHBaseCluster": "hbase-",
        "hdInsightKafkaCluster": "kafka-",
        "hdInsightSparkCluster": "spark-",
        "hdInsightStormCluster": "storm-",
        "hdInsightMLServicesCluster": "mls-",
        "iotHub": "iot-",
        "provisioningServices": "provs-",
        "provisioningServicesCertificate": "pcert-",
        "powerBIEmbedded": "pbi-",
        "timeSeriesInsightsEnvironment": "tsi-"
      },
      "compute": {
        "appServiceEnvironment": "ase-",
        "appServicePlan": "asp-",
        "loadTesting": "lt-",
        "availabilitySet": "avail-",
        "arcEnabledServer": "arcs-",
        "arcEnabledKubernetesCluster": "arck",
        "batchAccounts": "ba-",
        "cloudService": "cld-",
        "communicationServices": "acs-",
        "diskEncryptionSet": "des",
        "functionApp": "func-",
        "gallery": "gal",
        "hostingEnvironment": "host-",
        "imageTemplate": "it-",
        "managedDiskOS": "osdisk",
        "managedDiskData": "disk",
        "notificationHubs": "ntf-",
        "notificationHubsNamespace": "ntfns-",
        "proximityPlacementGroup": "ppg-",
        "restorePointCollection": "rpc-",
        "snapshot": "snap-",
        "staticWebApp": "stapp-",
        "virtualMachine": "vm",
        "virtualMachineScaleSet": "vmss-",
        "virtualMachineMaintenanceConfiguration": "mc-",
        "virtualMachineStorageAccount": "stvm",
        "webApp": "app-"
      },
      "containers": {
        "aksCluster": "aks-",
        "aksSystemNodePool": "npsystem-",
        "aksUserNodePool": "np-",
        "containerApp": "ca-",
        "containerAppsEnvironment": "cae-",
        "containerRegistry": "cr",
        "containerInstance": "ci",
        "serviceFabricCluster": "sf-",
        "serviceFabricManagedCluster": "sfmc-"
      },
      "databases": {
        "cosmosDBDatabase": "cosmos-",
        "cosmosDBApacheCassandra": "coscas-",
        "cosmosDBMongoDB": "cosmon-",
        "cosmosDBNoSQL": "cosno-",
        "cosmosDBTable": "costab-",
        "cosmosDBGremlin": "cosgrm-",
        "cosmosDBPostgreSQL": "cospos-",
        "cacheForRedis": "redis-",
        "sqlDatabaseServer": "sql-",
        "sqlDatabase": "sqldb-",
        "sqlElasticJobAgent": "sqlja-",
        "sqlElasticPool": "sqlep-",
        "mariaDBServer": "maria-",
        "mariaDBDatabase": "mariadb-",
        "mySQLDatabase": "mysql-",
        "postgreSQLDatabase": "psql-",
        "sqlServerStretchDatabase": "sqlstrdb-",
        "sqlManagedInstance": "sqlmi-"
      },
      "developerTools": {
        "appConfigurationStore": "appcs-",
        "mapsAccount": "map-",
        "signalR": "sigr",
        "webPubSub": "wps-"
      },
      "devOps": {
        "managedGrafana": "amg-"
      },
      "integration": {
        "apiManagementService": "apim-",
        "integrationAccount": "ia-",
        "logicApp": "logic-",
        "serviceBusNamespace": "sbns-",
        "serviceBusQueue": "sbq-",
        "serviceBusTopic": "sbt-",
        "serviceBusTopicSubscription": "sbts-"
      },
      "managementGovernance": {
        "automationAccount": "aa-",
        "applicationInsights": "appi-",
        "monitorActionGroup": "ag-",
        "monitorDataCollectionRules": "dcr-",
        "monitorAlertProcessingRule": "apr-",
        "blueprint": "bp-",
        "blueprintAssignment": "bpa-",
        "dataCollectionEndpoint": "dce-",
        "logAnalyticsWorkspace": "log-",
        "logAnalyticsQueryPacks": "pack-",
        "managementGroup": "mg-",
        "purviewInstance": "pview-",
        "resourceGroup": "rg-",
        "templateSpecsName": "ts-"
      },
      "migration": {
        "migrateProject": "migr-",
        "databaseMigrationService": "dms-",
        "recoveryServicesVault": "rsv-"
      },
      "networking": {
        "applicationGateway": "agw-",
        "applicationSecurityGroup": "asg-",
        "cdnProfile": "cdnp-",
        "cdnEndpoint": "cdne-",
        "connections": "con-",
        "dnsForwardingRuleset": "dnsfrs-",
        "dnsPrivateResolver": "dnspr-",
        "dnsPrivateResolverInboundEndpoint": "in-",
        "dnsPrivateResolverOutboundEndpoint": "out-",
        "firewall": "afw-",
        "firewallPolicy": "afwp-",
        "expressRouteCircuit": "erc-",
        "expressRouteGateway": "ergw-",
        "frontDoorProfile": "afd-",
        "frontDoorEndpoint": "fde-",
        "frontDoorFirewallPolicy": "fdfp-",
        "ipGroups": "ipg-",
        "loadBalancerInternal": "lbi-",
        "loadBalancerExternal": "lbe-",
        "loadBalancerRule": "rule-",
        "localNetworkGateway": "lgw-",
        "natGateway": "ng-",
        "networkInterface": "nic-",
        "networkSecurityGroup": "nsg-",
        "networkSecurityGroupSecurityRules": "nsgsr-",
        "networkWatcher": "nw-",
        "privateLink": "pl-",
        "privateEndpoint": "pep-",
        "publicIPAddress": "pip-",
        "publicIPAddressPrefix": "ippre-",
        "routeFilter": "rf-",
        "routeServer": "rtserv-",
        "routeTable": "rt-",
        "serviceEndpointPolicy": "se-",
        "trafficManagerProfile": "traf-",
        "userDefinedRoute": "udr-",
        "virtualNetwork": "vnet-",
        "virtualNetworkGateway": "vgw-",
        "virtualNetworkManager": "vnm-",
        "virtualNetworkPeering": "peer-",
        "virtualNetworkSubnet": "snet-",
        "virtualWAN": "vwan-",
        "virtualWANHub": "vhub-"
      },
      "security": {
        "bastion": "bas-",
        "keyVault": "kv-",
        "keyVaultManagedHSM": "kvmhsm-",
        "managedIdentity": "id-",
        "sshKey": "sshkey-",
        "vpnGateway": "vpng-",
        "vpnConnection": "vcn-",
        "vpnSite": "vst-",
        "webApplicationFirewallPolicy": "waf",
        "webApplicationFirewallPolicyRuleGroup": "wafrg"
      },
      "storage": {
        "storSimple": "ssimp",
        "backupVault": "bvault-",
        "backupVaultPolicy": "bkpol-",
        "fileShare": "share-",
        "storageAccount": "st",
        "storageSyncService": "sss-"
      },
      "virtualDesktop": {
        "labServicesPlan": "lp-",
        "virtualDesktopHostPool": "vdpool-",
        "virtualDesktopApplicationGroup": "vdag-",
        "virtualDesktopWorkspace": "vdws-",
        "virtualDesktopScalingPlan": "vdscaling-"
      }
    },
    "abbrs": "[variables('$fxv#0')]",
    "contentUnderstandingLocation": "",
    "solutionLocation": "[if(empty(parameters('AZURE_LOCATION')), resourceGroup().location, parameters('AZURE_LOCATION'))]",
    "uniqueId": "[toLower(uniqueString(subscription().id, parameters('environmentName'), variables('solutionLocation')))]",
    "solutionPrefix": "[format('da{0}', padLeft(take(variables('uniqueId'), 12), 12, '0'))]",
    "acrName": "dataagentscontainerreg",
    "baseUrl": "https://raw.githubusercontent.com/nchandhi/ncdatarepo1/main/"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/tags",
      "apiVersion": "2021-04-01",
      "name": "default",
      "properties": {
        "tags": {
          "TemplateName": "Data Agents Fabric"
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_managed_identity",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "miName": {
            "value": "[format('{0}{1}', variables('abbrs').security.managedIdentity, variables('solutionPrefix'))]"
          },
          "solutionName": {
            "value": "[variables('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "17731428009052197682"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Solution Location"
              }
            },
            "miName": {
              "type": "string",
              "metadata": {
                "description": "Name"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('miName')]",
              "location": "[parameters('solutionLocation')]",
              "tags": {
                "app": "[parameters('solutionName')]",
                "location": "[parameters('solutionLocation')]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName'))]"
              ]
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[format('{0}-backend-app-mi', parameters('solutionName'))]",
              "location": "[parameters('solutionLocation')]",
              "tags": {
                "app": "[parameters('solutionName')]",
                "location": "[parameters('solutionLocation')]"
              }
            }
          ],
          "outputs": {
            "managedIdentityOutput": {
              "type": "object",
              "value": {
                "id": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName'))]",
                "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').principalId]",
                "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').clientId]",
                "name": "[parameters('miName')]"
              }
            },
            "managedIdentityBackendAppOutput": {
              "type": "object",
              "value": {
                "id": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-backend-app-mi', parameters('solutionName')))]",
                "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-backend-app-mi', parameters('solutionName'))), '2023-01-31').principalId]",
                "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-backend-app-mi', parameters('solutionName'))), '2023-01-31').clientId]",
                "name": "[format('{0}-backend-app-mi', parameters('solutionName'))]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_keyvault",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyvaultName": {
            "value": "[format('{0}{1}', variables('abbrs').security.keyVault, variables('solutionPrefix'))]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "9273597293012945961"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string"
            },
            "managedIdentityObjectId": {
              "type": "string"
            },
            "keyvaultName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('keyvaultName')]",
              "location": "[parameters('solutionLocation')]",
              "properties": {
                "createMode": "default",
                "accessPolicies": [
                  {
                    "objectId": "[parameters('managedIdentityObjectId')]",
                    "permissions": {
                      "certificates": [
                        "all"
                      ],
                      "keys": [
                        "all"
                      ],
                      "secrets": [
                        "all"
                      ],
                      "storage": [
                        "all"
                      ]
                    },
                    "tenantId": "[subscription().tenantId]"
                  }
                ],
                "enabledForDeployment": true,
                "enabledForDiskEncryption": true,
                "enabledForTemplateDeployment": true,
                "enableRbacAuthorization": true,
                "publicNetworkAccess": "enabled",
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "softDeleteRetentionInDays": 7,
                "tenantId": "[subscription().tenantId]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, parameters('managedIdentityObjectId'), resourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "keyvaultName": {
              "type": "string",
              "value": "[parameters('keyvaultName')]"
            },
            "keyvaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
            },
            "keyvaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName')), '2022-07-01').vaultUri]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_ai_foundry",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[variables('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[parameters('aiDeploymentsLocation')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultName.value]"
          },
          "cuLocation": {
            "value": "[variables('contentUnderstandingLocation')]"
          },
          "deploymentType": {
            "value": "[parameters('deploymentType')]"
          },
          "gptModelName": {
            "value": "[parameters('gptModelName')]"
          },
          "gptModelVersion": {
            "value": "[parameters('gptModelVersion')]"
          },
          "azureOpenAIApiVersion": {
            "value": "[parameters('azureOpenAIApiVersion')]"
          },
          "gptDeploymentCapacity": {
            "value": "[parameters('gptDeploymentCapacity')]"
          },
          "embeddingModel": {
            "value": "[parameters('embeddingModel')]"
          },
          "embeddingDeploymentCapacity": {
            "value": "[parameters('embeddingDeploymentCapacity')]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          },
          "existingLogAnalyticsWorkspaceId": {
            "value": "[parameters('existingLogAnalyticsWorkspaceId')]"
          },
          "azureExistingAIProjectResourceId": {
            "value": "[parameters('azureExistingAIProjectResourceId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "14233796053283962761"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string"
            },
            "solutionLocation": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": ""
            },
            "cuLocation": {
              "type": "string"
            },
            "deploymentType": {
              "type": "string"
            },
            "gptModelName": {
              "type": "string"
            },
            "gptModelVersion": {
              "type": "string"
            },
            "azureOpenAIApiVersion": {
              "type": "string"
            },
            "gptDeploymentCapacity": {
              "type": "int"
            },
            "embeddingModel": {
              "type": "string"
            },
            "embeddingDeploymentCapacity": {
              "type": "int"
            },
            "managedIdentityObjectId": {
              "type": "string",
              "defaultValue": ""
            },
            "existingLogAnalyticsWorkspaceId": {
              "type": "string",
              "defaultValue": ""
            },
            "azureExistingAIProjectResourceId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "$fxv#0": {
              "ai": {
                "aiSearch": "srch-",
                "aiServices": "aisa-",
                "aiVideoIndexer": "avi-",
                "machineLearningWorkspace": "mlw-",
                "openAIService": "oai-",
                "botService": "bot-",
                "computerVision": "cv-",
                "contentModerator": "cm-",
                "contentSafety": "cs-",
                "customVisionPrediction": "cstv-",
                "customVisionTraining": "cstvt-",
                "documentIntelligence": "di-",
                "faceApi": "face-",
                "healthInsights": "hi-",
                "immersiveReader": "ir-",
                "languageService": "lang-",
                "speechService": "spch-",
                "translator": "trsl-",
                "aiHub": "aih-",
                "aiHubProject": "aihp-",
                "aiFoundry": "aif-",
                "aiFoundryProject": "aifp-"
              },
              "analytics": {
                "analysisServicesServer": "as",
                "databricksWorkspace": "dbw-",
                "dataExplorerCluster": "dec",
                "dataExplorerClusterDatabase": "dedb",
                "dataFactory": "adf-",
                "digitalTwin": "dt-",
                "streamAnalytics": "asa-",
                "synapseAnalyticsPrivateLinkHub": "synplh-",
                "synapseAnalyticsSQLDedicatedPool": "syndp",
                "synapseAnalyticsSparkPool": "synsp",
                "synapseAnalyticsWorkspaces": "synw",
                "dataLakeStoreAccount": "dls",
                "dataLakeAnalyticsAccount": "dla",
                "eventHubsNamespace": "evhns-",
                "eventHub": "evh-",
                "eventGridDomain": "evgd-",
                "eventGridSubscriptions": "evgs-",
                "eventGridTopic": "evgt-",
                "eventGridSystemTopic": "egst-",
                "hdInsightHadoopCluster": "hadoop-",
                "hdInsightHBaseCluster": "hbase-",
                "hdInsightKafkaCluster": "kafka-",
                "hdInsightSparkCluster": "spark-",
                "hdInsightStormCluster": "storm-",
                "hdInsightMLServicesCluster": "mls-",
                "iotHub": "iot-",
                "provisioningServices": "provs-",
                "provisioningServicesCertificate": "pcert-",
                "powerBIEmbedded": "pbi-",
                "timeSeriesInsightsEnvironment": "tsi-"
              },
              "compute": {
                "appServiceEnvironment": "ase-",
                "appServicePlan": "asp-",
                "loadTesting": "lt-",
                "availabilitySet": "avail-",
                "arcEnabledServer": "arcs-",
                "arcEnabledKubernetesCluster": "arck",
                "batchAccounts": "ba-",
                "cloudService": "cld-",
                "communicationServices": "acs-",
                "diskEncryptionSet": "des",
                "functionApp": "func-",
                "gallery": "gal",
                "hostingEnvironment": "host-",
                "imageTemplate": "it-",
                "managedDiskOS": "osdisk",
                "managedDiskData": "disk",
                "notificationHubs": "ntf-",
                "notificationHubsNamespace": "ntfns-",
                "proximityPlacementGroup": "ppg-",
                "restorePointCollection": "rpc-",
                "snapshot": "snap-",
                "staticWebApp": "stapp-",
                "virtualMachine": "vm",
                "virtualMachineScaleSet": "vmss-",
                "virtualMachineMaintenanceConfiguration": "mc-",
                "virtualMachineStorageAccount": "stvm",
                "webApp": "app-"
              },
              "containers": {
                "aksCluster": "aks-",
                "aksSystemNodePool": "npsystem-",
                "aksUserNodePool": "np-",
                "containerApp": "ca-",
                "containerAppsEnvironment": "cae-",
                "containerRegistry": "cr",
                "containerInstance": "ci",
                "serviceFabricCluster": "sf-",
                "serviceFabricManagedCluster": "sfmc-"
              },
              "databases": {
                "cosmosDBDatabase": "cosmos-",
                "cosmosDBApacheCassandra": "coscas-",
                "cosmosDBMongoDB": "cosmon-",
                "cosmosDBNoSQL": "cosno-",
                "cosmosDBTable": "costab-",
                "cosmosDBGremlin": "cosgrm-",
                "cosmosDBPostgreSQL": "cospos-",
                "cacheForRedis": "redis-",
                "sqlDatabaseServer": "sql-",
                "sqlDatabase": "sqldb-",
                "sqlElasticJobAgent": "sqlja-",
                "sqlElasticPool": "sqlep-",
                "mariaDBServer": "maria-",
                "mariaDBDatabase": "mariadb-",
                "mySQLDatabase": "mysql-",
                "postgreSQLDatabase": "psql-",
                "sqlServerStretchDatabase": "sqlstrdb-",
                "sqlManagedInstance": "sqlmi-"
              },
              "developerTools": {
                "appConfigurationStore": "appcs-",
                "mapsAccount": "map-",
                "signalR": "sigr",
                "webPubSub": "wps-"
              },
              "devOps": {
                "managedGrafana": "amg-"
              },
              "integration": {
                "apiManagementService": "apim-",
                "integrationAccount": "ia-",
                "logicApp": "logic-",
                "serviceBusNamespace": "sbns-",
                "serviceBusQueue": "sbq-",
                "serviceBusTopic": "sbt-",
                "serviceBusTopicSubscription": "sbts-"
              },
              "managementGovernance": {
                "automationAccount": "aa-",
                "applicationInsights": "appi-",
                "monitorActionGroup": "ag-",
                "monitorDataCollectionRules": "dcr-",
                "monitorAlertProcessingRule": "apr-",
                "blueprint": "bp-",
                "blueprintAssignment": "bpa-",
                "dataCollectionEndpoint": "dce-",
                "logAnalyticsWorkspace": "log-",
                "logAnalyticsQueryPacks": "pack-",
                "managementGroup": "mg-",
                "purviewInstance": "pview-",
                "resourceGroup": "rg-",
                "templateSpecsName": "ts-"
              },
              "migration": {
                "migrateProject": "migr-",
                "databaseMigrationService": "dms-",
                "recoveryServicesVault": "rsv-"
              },
              "networking": {
                "applicationGateway": "agw-",
                "applicationSecurityGroup": "asg-",
                "cdnProfile": "cdnp-",
                "cdnEndpoint": "cdne-",
                "connections": "con-",
                "dnsForwardingRuleset": "dnsfrs-",
                "dnsPrivateResolver": "dnspr-",
                "dnsPrivateResolverInboundEndpoint": "in-",
                "dnsPrivateResolverOutboundEndpoint": "out-",
                "firewall": "afw-",
                "firewallPolicy": "afwp-",
                "expressRouteCircuit": "erc-",
                "expressRouteGateway": "ergw-",
                "frontDoorProfile": "afd-",
                "frontDoorEndpoint": "fde-",
                "frontDoorFirewallPolicy": "fdfp-",
                "ipGroups": "ipg-",
                "loadBalancerInternal": "lbi-",
                "loadBalancerExternal": "lbe-",
                "loadBalancerRule": "rule-",
                "localNetworkGateway": "lgw-",
                "natGateway": "ng-",
                "networkInterface": "nic-",
                "networkSecurityGroup": "nsg-",
                "networkSecurityGroupSecurityRules": "nsgsr-",
                "networkWatcher": "nw-",
                "privateLink": "pl-",
                "privateEndpoint": "pep-",
                "publicIPAddress": "pip-",
                "publicIPAddressPrefix": "ippre-",
                "routeFilter": "rf-",
                "routeServer": "rtserv-",
                "routeTable": "rt-",
                "serviceEndpointPolicy": "se-",
                "trafficManagerProfile": "traf-",
                "userDefinedRoute": "udr-",
                "virtualNetwork": "vnet-",
                "virtualNetworkGateway": "vgw-",
                "virtualNetworkManager": "vnm-",
                "virtualNetworkPeering": "peer-",
                "virtualNetworkSubnet": "snet-",
                "virtualWAN": "vwan-",
                "virtualWANHub": "vhub-"
              },
              "security": {
                "bastion": "bas-",
                "keyVault": "kv-",
                "keyVaultManagedHSM": "kvmhsm-",
                "managedIdentity": "id-",
                "sshKey": "sshkey-",
                "vpnGateway": "vpng-",
                "vpnConnection": "vcn-",
                "vpnSite": "vst-",
                "webApplicationFirewallPolicy": "waf",
                "webApplicationFirewallPolicyRuleGroup": "wafrg"
              },
              "storage": {
                "storSimple": "ssimp",
                "backupVault": "bvault-",
                "backupVaultPolicy": "bkpol-",
                "fileShare": "share-",
                "storageAccount": "st",
                "storageSyncService": "sss-"
              },
              "virtualDesktop": {
                "labServicesPlan": "lp-",
                "virtualDesktopHostPool": "vdpool-",
                "virtualDesktopApplicationGroup": "vdag-",
                "virtualDesktopWorkspace": "vdws-",
                "virtualDesktopScalingPlan": "vdscaling-"
              }
            },
            "abbrs": "[variables('$fxv#0')]",
            "aiServicesName": "[format('{0}{1}', variables('abbrs').ai.aiServices, parameters('solutionName'))]",
            "workspaceName": "[format('{0}{1}', variables('abbrs').managementGovernance.logAnalyticsWorkspace, parameters('solutionName'))]",
            "applicationInsightsName": "[format('{0}{1}', variables('abbrs').managementGovernance.applicationInsights, parameters('solutionName'))]",
            "keyvaultName": "[format('{0}{1}', variables('abbrs').security.keyVault, parameters('solutionName'))]",
            "location": "[parameters('solutionLocation')]",
            "aiProjectName": "[format('{0}{1}', variables('abbrs').ai.aiFoundryProject, parameters('solutionName'))]",
            "aiSearchName": "[format('{0}{1}', variables('abbrs').ai.aiSearch, parameters('solutionName'))]",
            "aiModelDeployments": [
              {
                "name": "[parameters('gptModelName')]",
                "model": "[parameters('gptModelName')]",
                "sku": {
                  "name": "[parameters('deploymentType')]",
                  "capacity": "[parameters('gptDeploymentCapacity')]"
                },
                "version": "[parameters('gptModelVersion')]",
                "raiPolicyName": "Microsoft.Default"
              },
              {
                "name": "[parameters('embeddingModel')]",
                "model": "[parameters('embeddingModel')]",
                "sku": {
                  "name": "GlobalStandard",
                  "capacity": "[parameters('embeddingDeploymentCapacity')]"
                },
                "raiPolicyName": "Microsoft.Default"
              }
            ],
            "useExisting": "[not(empty(parameters('existingLogAnalyticsWorkspaceId')))]",
            "existingLawSubscription": "[if(variables('useExisting'), split(parameters('existingLogAnalyticsWorkspaceId'), '/')[2], '')]",
            "existingLawResourceGroup": "[if(variables('useExisting'), split(parameters('existingLogAnalyticsWorkspaceId'), '/')[4], '')]",
            "existingLawName": "[if(variables('useExisting'), split(parameters('existingLogAnalyticsWorkspaceId'), '/')[8], '')]",
            "existingOpenAIEndpoint": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), format('https://{0}.openai.azure.com/', split(parameters('azureExistingAIProjectResourceId'), '/')[8]), '')]",
            "existingProjEndpoint": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), format('https://{0}.services.ai.azure.com/api/projects/{1}', split(parameters('azureExistingAIProjectResourceId'), '/')[8], split(parameters('azureExistingAIProjectResourceId'), '/')[10]), '')]",
            "existingAIServicesName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[8], '')]",
            "existingAIProjectName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[10], '')]",
            "existingAIServiceSubscription": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[2], subscription().subscriptionId)]",
            "existingAIServiceResourceGroup": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[4], resourceGroup().name)]"
          },
          "resources": [
            {
              "condition": "[not(variables('useExisting'))]",
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2023-09-01",
              "name": "[variables('workspaceName')]",
              "location": "[variables('location')]",
              "tags": {},
              "properties": {
                "retentionInDays": 30,
                "sku": {
                  "name": "PerGB2018"
                }
              }
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[variables('applicationInsightsName')]",
              "location": "[variables('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Disabled",
                "WorkspaceResourceId": "[if(variables('useExisting'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingLawSubscription'), variables('existingLawResourceGroup')), 'Microsoft.OperationalInsights/workspaces', variables('existingLawName')), resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
              ]
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2025-04-01-preview",
              "name": "[variables('aiServicesName')]",
              "location": "[variables('location')]",
              "sku": {
                "name": "S0"
              },
              "kind": "AIServices",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "allowProjectManagement": true,
                "customSubDomainName": "[variables('aiServicesName')]",
                "networkAcls": {
                  "defaultAction": "Allow",
                  "virtualNetworkRules": [],
                  "ipRules": []
                },
                "publicNetworkAccess": "Enabled",
                "disableLocalAuth": false
              }
            },
            {
              "copy": {
                "name": "aiServicesDeployments",
                "count": "[length(variables('aiModelDeployments'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', variables('aiServicesName'), variables('aiModelDeployments')[copyIndex()].name)]",
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "[variables('aiModelDeployments')[copyIndex()].model]"
                },
                "raiPolicyName": "[variables('aiModelDeployments')[copyIndex()].raiPolicyName]"
              },
              "sku": {
                "name": "[variables('aiModelDeployments')[copyIndex()].sku.name]",
                "capacity": "[variables('aiModelDeployments')[copyIndex()].sku.capacity]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.CognitiveServices/accounts/projects",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', variables('aiServicesName'), variables('aiProjectName'))]",
              "location": "[parameters('solutionLocation')]",
              "kind": "AIServices",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {},
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', variables('aiServicesName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), resourceId('Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'TENANT-ID')]",
              "properties": {
                "value": "[subscription().tenantId]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-INFERENCE-ENDPOINT')]",
              "properties": {
                "value": ""
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-INFERENCE-KEY')]",
              "properties": {
                "value": ""
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-DEPLOYMENT-MODEL')]",
              "properties": {
                "value": "[parameters('gptModelName')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-PREVIEW-API-VERSION')]",
              "properties": {
                "value": "[parameters('azureOpenAIApiVersion')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-ENDPOINT')]",
              "properties": {
                "value": "[if(not(empty(variables('existingOpenAIEndpoint'))), variables('existingOpenAIEndpoint'), reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), '2025-04-01-preview').endpoints['OpenAI Language Model Instance API'])]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-EMBEDDING-MODEL')]",
              "properties": {
                "value": "[parameters('embeddingModel')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-CU-ENDPOINT')]",
              "properties": {
                "value": ""
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-CU-VERSION')]",
              "properties": {
                "value": "?api-version=2024-12-01-preview"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-ENDPOINT')]",
              "properties": {
                "value": ""
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-SERVICE')]",
              "properties": {
                "value": ""
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-INDEX')]",
              "properties": {
                "value": ""
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'COG-SERVICES-ENDPOINT')]",
              "properties": {
                "value": "[if(not(empty(variables('existingOpenAIEndpoint'))), variables('existingOpenAIEndpoint'), reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), '2025-04-01-preview').endpoints['OpenAI Language Model Instance API'])]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'COG-SERVICES-NAME')]",
              "properties": {
                "value": "[variables('aiServicesName')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SUBSCRIPTION-ID')]",
              "properties": {
                "value": "[subscription().subscriptionId]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-RESOURCE-GROUP')]",
              "properties": {
                "value": "[resourceGroup().name]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-LOCATION')]",
              "properties": {
                "value": "[parameters('solutionLocation')]"
              }
            },
            {
              "condition": "[not(empty(parameters('azureExistingAIProjectResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "existing_foundry_project",
              "subscriptionId": "[variables('existingAIServiceSubscription')]",
              "resourceGroup": "[variables('existingAIServiceResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aiServicesName": {
                    "value": "[variables('existingAIServicesName')]"
                  },
                  "aiProjectName": {
                    "value": "[variables('existingAIProjectName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "12205957099854323574"
                    }
                  },
                  "parameters": {
                    "aiServicesName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the existing Azure AI Services account"
                      }
                    },
                    "aiProjectName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the existing AI Project under the AI Services account"
                      }
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').location]"
                    },
                    "skuName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').sku.name]"
                    },
                    "kind": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').kind]"
                    },
                    "allowProjectManagement": {
                      "type": "bool",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').allowProjectManagement]"
                    },
                    "customSubDomainName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').customSubDomainName]"
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').publicNetworkAccess]"
                    },
                    "defaultNetworkAction": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').networkAcls.defaultAction]"
                    },
                    "ipRules": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').networkAcls.ipRules]"
                    },
                    "vnetRules": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').networkAcls.virtualNetworkRules]"
                    },
                    "projectLocation": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').location]"
                    },
                    "projectKind": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').kind]"
                    },
                    "projectProvisioningState": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview').provisioningState]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[not(empty(parameters('azureExistingAIProjectResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "assignFoundryRoleToMI",
              "subscriptionId": "[variables('existingAIServiceSubscription')]",
              "resourceGroup": "[variables('existingAIServiceResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleDefinitionId": {
                    "value": "[resourceId('Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d')]"
                  },
                  "roleAssignmentName": {
                    "value": "[guid(resourceGroup().id, parameters('managedIdentityObjectId'), resourceId('Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d'), 'foundry')]"
                  },
                  "aiServicesName": {
                    "value": "[variables('existingAIServicesName')]"
                  },
                  "aiProjectName": {
                    "value": "[variables('existingAIProjectName')]"
                  },
                  "principalId": {
                    "value": "[parameters('managedIdentityObjectId')]"
                  },
                  "aiLocation": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'existing_foundry_project'), '2022-09-01').outputs.location.value]"
                  },
                  "aiKind": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'existing_foundry_project'), '2022-09-01').outputs.kind.value]"
                  },
                  "aiSkuName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'existing_foundry_project'), '2022-09-01').outputs.skuName.value]"
                  },
                  "customSubDomainName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'existing_foundry_project'), '2022-09-01').outputs.customSubDomainName.value]"
                  },
                  "publicNetworkAccess": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'existing_foundry_project'), '2022-09-01').outputs.publicNetworkAccess.value]"
                  },
                  "enableSystemAssignedIdentity": {
                    "value": true
                  },
                  "defaultNetworkAction": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'existing_foundry_project'), '2022-09-01').outputs.defaultNetworkAction.value]"
                  },
                  "vnetRules": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'existing_foundry_project'), '2022-09-01').outputs.vnetRules.value]"
                  },
                  "ipRules": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'existing_foundry_project'), '2022-09-01').outputs.ipRules.value]"
                  },
                  "aiModelDeployments": {
                    "value": "[variables('aiModelDeployments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "7452802017248155173"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "roleDefinitionId": {
                      "type": "string"
                    },
                    "roleAssignmentName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "aiServicesName": {
                      "type": "string"
                    },
                    "aiProjectName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "aiLocation": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "aiKind": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "aiSkuName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "enableSystemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "customSubDomainName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "defaultNetworkAction": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "vnetRules": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "ipRules": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "aiModelDeployments": {
                      "type": "array",
                      "defaultValue": []
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableSystemAssignedIdentity')]",
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[parameters('aiServicesName')]",
                      "location": "[parameters('aiLocation')]",
                      "kind": "[parameters('aiKind')]",
                      "sku": {
                        "name": "[parameters('aiSkuName')]"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "allowProjectManagement": true,
                        "customSubDomainName": "[parameters('customSubDomainName')]",
                        "networkAcls": {
                          "defaultAction": "[parameters('defaultNetworkAction')]",
                          "virtualNetworkRules": "[parameters('vnetRules')]",
                          "ipRules": "[parameters('ipRules')]"
                        },
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "aiServicesDeployments",
                        "count": "[length(parameters('aiModelDeployments'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[not(empty(parameters('aiModelDeployments')))]",
                      "type": "Microsoft.CognitiveServices/accounts/deployments",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[format('{0}/{1}', parameters('aiServicesName'), parameters('aiModelDeployments')[copyIndex()].name)]",
                      "properties": {
                        "model": {
                          "format": "OpenAI",
                          "name": "[parameters('aiModelDeployments')[copyIndex()].model]"
                        },
                        "raiPolicyName": "[parameters('aiModelDeployments')[copyIndex()].raiPolicyName]"
                      },
                      "sku": {
                        "name": "[parameters('aiModelDeployments')[copyIndex()].sku.name]",
                        "capacity": "[parameters('aiModelDeployments')[copyIndex()].sku.capacity]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                      ]
                    },
                    {
                      "condition": "[and(not(empty(parameters('aiProjectName'))), parameters('enableSystemAssignedIdentity'))]",
                      "type": "Microsoft.CognitiveServices/accounts/projects",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[format('{0}/{1}', parameters('aiServicesName'), parameters('aiProjectName'))]",
                      "location": "[parameters('aiLocation')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {},
                      "dependsOn": [
                        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableSystemAssignedIdentity')]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
                      "name": "[parameters('roleAssignmentName')]",
                      "properties": {
                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                      ]
                    },
                    {
                      "condition": "[not(parameters('enableSystemAssignedIdentity'))]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
                      "name": "[parameters('roleAssignmentName')]",
                      "properties": {
                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ],
                  "outputs": {
                    "aiServicesPrincipalId": {
                      "type": "string",
                      "value": "[if(parameters('enableSystemAssignedIdentity'), reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').identity.principalId, reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').identity.principalId)]"
                    },
                    "aiProjectPrincipalId": {
                      "type": "string",
                      "value": "[if(not(empty(parameters('aiProjectName'))), if(parameters('enableSystemAssignedIdentity'), reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').identity.principalId, reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').identity.principalId), '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'existing_foundry_project')]"
              ]
            }
          ],
          "outputs": {
            "keyvaultName": {
              "type": "string",
              "value": "[variables('keyvaultName')]"
            },
            "keyvaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "aiServicesTarget": {
              "type": "string",
              "value": "[if(not(empty(variables('existingOpenAIEndpoint'))), variables('existingOpenAIEndpoint'), reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), '2025-04-01-preview').endpoints['OpenAI Language Model Instance API'])]"
            },
            "aiServicesName": {
              "type": "string",
              "value": "[if(not(empty(variables('existingAIServicesName'))), variables('existingAIServicesName'), variables('aiServicesName'))]"
            },
            "aiSearchName": {
              "type": "string",
              "value": "[variables('aiSearchName')]"
            },
            "aiSearchId": {
              "type": "string",
              "value": ""
            },
            "aiSearchTarget": {
              "type": "string",
              "value": ""
            },
            "aiSearchService": {
              "type": "string",
              "value": ""
            },
            "aiProjectName": {
              "type": "string",
              "value": "[if(not(empty(variables('existingAIProjectName'))), variables('existingAIProjectName'), variables('aiProjectName'))]"
            },
            "aiSearchConnectionName": {
              "type": "string",
              "value": ""
            },
            "applicationInsightsId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
            },
            "logAnalyticsWorkspaceResourceName": {
              "type": "string",
              "value": "[if(variables('useExisting'), variables('existingLawName'), variables('workspaceName'))]"
            },
            "logAnalyticsWorkspaceResourceGroup": {
              "type": "string",
              "value": "[if(variables('useExisting'), variables('existingLawResourceGroup'), resourceGroup().name)]"
            },
            "logAnalyticsWorkspaceSubscription": {
              "type": "string",
              "value": "[if(variables('useExisting'), variables('existingLawSubscription'), subscription().subscriptionId)]"
            },
            "projectEndpoint": {
              "type": "string",
              "value": "[if(not(empty(variables('existingProjEndpoint'))), variables('existingProjEndpoint'), reference(resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiServicesName'), variables('aiProjectName')), '2025-04-01-preview').endpoints['AI Foundry API'])]"
            },
            "applicationInsightsConnectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').ConnectionString]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "run_agent_scripts",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "managedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.id]"
          },
          "managedIdentityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.clientId]"
          },
          "baseUrl": {
            "value": "[variables('baseUrl')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.keyvaultName.value]"
          },
          "projectEndpoint": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.projectEndpoint.value]"
          },
          "solutionName": {
            "value": "[variables('solutionPrefix')]"
          },
          "gptModelName": {
            "value": "[parameters('gptModelName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "16694761092521502370"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location for resources."
              }
            },
            "baseUrl": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "managedIdentityResourceId": {
              "type": "string"
            },
            "managedIdentityClientId": {
              "type": "string"
            },
            "projectEndpoint": {
              "type": "string"
            },
            "solutionName": {
              "type": "string"
            },
            "gptModelName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "run_agent_scripts",
              "kind": "AzureCLI",
              "location": "[parameters('solutionLocation')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('managedIdentityResourceId'))]": {}
                }
              },
              "properties": {
                "azCliVersion": "2.52.0",
                "primaryScriptUri": "[format('{0}infra/scripts/run_create_agent_scripts.sh', parameters('baseUrl'))]",
                "arguments": "[format('{0} {1} {2} {3} {4} {5}', parameters('baseUrl'), parameters('keyVaultName'), parameters('managedIdentityClientId'), parameters('projectEndpoint'), parameters('solutionName'), parameters('gptModelName'))]",
                "timeout": "PT1H",
                "retentionInterval": "PT1H",
                "cleanupPreference": "OnSuccess"
              }
            }
          ],
          "outputs": {
            "orchestratorAgentId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'run_agent_scripts'), '2023-08-01').outputs.orchestratorAgentId]"
            },
            "sqlAgentId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'run_agent_scripts'), '2023-08-01').outputs.sqlAgentId]"
            },
            "chartAgentId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'run_agent_scripts'), '2023-08-01').outputs.chartAgentId]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_app_service_plan",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "HostingPlanName": {
            "value": "[format('{0}{1}', variables('abbrs').compute.appServicePlan, variables('solutionPrefix'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "953975247217569065"
            },
            "description": "Creates an Azure App Service plan."
          },
          "parameters": {
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Solution Location"
              }
            },
            "HostingPlanName": {
              "type": "string",
              "metadata": {
                "description": "Name of App Service plan"
              }
            },
            "HostingPlanSku": {
              "type": "string",
              "defaultValue": "B2",
              "allowedValues": [
                "F1",
                "D1",
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1",
                "P2",
                "P3",
                "P4",
                "P0v3"
              ],
              "metadata": {
                "description": "The pricing tier for the App Service plan"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2020-06-01",
              "name": "[parameters('HostingPlanName')]",
              "location": "[parameters('solutionLocation')]",
              "sku": {
                "name": "[parameters('HostingPlanSku')]"
              },
              "properties": {
                "reserved": true
              },
              "kind": "linux"
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('HostingPlanName'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('HostingPlanName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_backend_docker",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('api-{0}', variables('solutionPrefix'))]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "imageTag": {
            "value": "[parameters('imageTag')]"
          },
          "acrName": {
            "value": "[variables('acrName')]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_app_service_plan'), '2022-09-01').outputs.name.value]"
          },
          "applicationInsightsId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.applicationInsightsId.value]"
          },
          "userassignedIdentityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityBackendAppOutput.value.id]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultName.value]"
          },
          "aiServicesName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiServicesName.value]"
          },
          "azureExistingAIProjectResourceId": {
            "value": "[parameters('azureExistingAIProjectResourceId')]"
          },
          "aiSearchName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchName.value]"
          },
          "appSettings": {
            "value": {
              "AZURE_OPENAI_DEPLOYMENT_MODEL": "[parameters('gptModelName')]",
              "AZURE_OPENAI_ENDPOINT": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiServicesTarget.value]",
              "AZURE_OPENAI_API_VERSION": "[parameters('azureOpenAIApiVersion')]",
              "AZURE_OPENAI_RESOURCE": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiServicesName.value]",
              "AZURE_AI_AGENT_ENDPOINT": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.projectEndpoint.value]",
              "AZURE_AI_AGENT_API_VERSION": "[parameters('azureAiAgentApiVersion')]",
              "AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME": "[parameters('gptModelName')]",
              "USE_CHAT_HISTORY_ENABLED": "True",
              "AZURE_COSMOSDB_ACCOUNT": "",
              "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER": "",
              "AZURE_COSMOSDB_DATABASE": "",
              "AZURE_COSMOSDB_ENABLE_FEEDBACK": "",
              "SQLDB_DATABASE": "",
              "SQLDB_SERVER": "",
              "SQLDB_USER_MID": "",
              "API_UID": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityBackendAppOutput.value.clientId]",
              "AZURE_AI_SEARCH_ENDPOINT": "",
              "AZURE_AI_SEARCH_INDEX": "",
              "AZURE_AI_SEARCH_CONNECTION_NAME": "",
              "USE_AI_PROJECT_CLIENT": "True",
              "DISPLAY_CHART_DEFAULT": "False",
              "APPLICATIONINSIGHTS_CONNECTION_STRING": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.applicationInsightsConnectionString.value]",
              "DUMMY_TEST": "True",
              "SOLUTION_NAME": "[variables('solutionPrefix')]",
              "APP_ENV": "Prod",
              "AGENT_ID_ORCHESTRATOR": "[reference(resourceId('Microsoft.Resources/deployments', 'run_agent_scripts'), '2022-09-01').outputs.orchestratorAgentId.value]",
              "AGENT_ID_SQL": "[reference(resourceId('Microsoft.Resources/deployments', 'run_agent_scripts'), '2022-09-01').outputs.sqlAgentId.value]",
              "AGENT_ID_CHART": "[reference(resourceId('Microsoft.Resources/deployments', 'run_agent_scripts'), '2022-09-01').outputs.chartAgentId.value]",
              "FABRIC_SQL_DATABASE": "",
              "FABRIC_SQL_SERVER": "",
              "FABRIC_SQL_CONNECTION_STRING": ""
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "2249127600011396058"
            }
          },
          "parameters": {
            "imageTag": {
              "type": "string"
            },
            "acrName": {
              "type": "string"
            },
            "applicationInsightsId": {
              "type": "string"
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Solution Location"
              }
            },
            "appSettings": {
              "type": "secureObject",
              "defaultValue": {}
            },
            "appServicePlanId": {
              "type": "string"
            },
            "userassignedIdentityId": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "aiServicesName": {
              "type": "string"
            },
            "azureExistingAIProjectResourceId": {
              "type": "string",
              "defaultValue": ""
            },
            "aiSearchName": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "variables": {
            "existingAIServiceSubscription": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[2], subscription().subscriptionId)]",
            "existingAIServiceResourceGroup": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[4], resourceGroup().name)]",
            "existingAIServicesName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[8], '')]",
            "existingAIProjectName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[10], '')]",
            "imageName": "[format('DOCKER|{0}.azurecr.io/da-api:{1}', parameters('acrName'), parameters('imageTag'))]",
            "reactAppLayoutConfig": "{\r\n  \"appConfig\": {\r\n      \"CHAT_CHATHISTORY\": {\r\n        \"CHAT\": 70,\r\n        \"CHATHISTORY\": 30\r\n      }\r\n    }\r\n  }\r\n}"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(format('{0}-app-module', parameters('name')), parameters('keyVaultName'), resourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                "principalId": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-app-module', parameters('name'))), '2022-09-01').outputs.identityPrincipalId.value]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('{0}-app-module', parameters('name')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-app-module', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "solutionName": {
                    "value": "[parameters('name')]"
                  },
                  "solutionLocation": {
                    "value": "[parameters('solutionLocation')]"
                  },
                  "appServicePlanId": {
                    "value": "[parameters('appServicePlanId')]"
                  },
                  "appImageName": {
                    "value": "[variables('imageName')]"
                  },
                  "userassignedIdentityId": {
                    "value": "[parameters('userassignedIdentityId')]"
                  },
                  "appSettings": {
                    "value": "[union(parameters('appSettings'), createObject('APPINSIGHTS_INSTRUMENTATIONKEY', reference(parameters('applicationInsightsId'), '2015-05-01').InstrumentationKey, 'REACT_APP_LAYOUT_CONFIG', variables('reactAppLayoutConfig')))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "17046884165398746428"
                    }
                  },
                  "parameters": {
                    "solutionName": {
                      "type": "string",
                      "metadata": {
                        "description": "Solution Name"
                      }
                    },
                    "solutionLocation": {
                      "type": "string",
                      "metadata": {
                        "description": "Solution Location"
                      }
                    },
                    "appSettings": {
                      "type": "secureObject",
                      "defaultValue": {}
                    },
                    "appServicePlanId": {
                      "type": "string"
                    },
                    "appImageName": {
                      "type": "string"
                    },
                    "userassignedIdentityId": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('solutionName'), 'ftp')]",
                      "properties": {
                        "allow": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('solutionName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('solutionName'), 'scm')]",
                      "properties": {
                        "allow": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('solutionName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('solutionName')]",
                      "location": "[parameters('solutionLocation')]",
                      "identity": "[if(equals(parameters('userassignedIdentityId'), ''), createObject('type', 'SystemAssigned'), createObject('type', 'SystemAssigned, UserAssigned', 'userAssignedIdentities', createObject(format('{0}', parameters('userassignedIdentityId')), createObject())))]",
                      "properties": {
                        "serverFarmId": "[parameters('appServicePlanId')]",
                        "siteConfig": {
                          "alwaysOn": true,
                          "ftpsState": "Disabled",
                          "linuxFxVersion": "[parameters('appImageName')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('solutionName'), 'logs')]",
                      "properties": {
                        "applicationLogs": {
                          "fileSystem": {
                            "level": "Verbose"
                          }
                        },
                        "detailedErrorMessages": {
                          "enabled": true
                        },
                        "failedRequestsTracing": {
                          "enabled": true
                        },
                        "httpLogs": {
                          "fileSystem": {
                            "enabled": true,
                            "retentionInDays": 1,
                            "retentionInMb": 35
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('solutionName'))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-appSettings', parameters('solutionName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-appSettings', parameters('solutionName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('solutionName')]"
                          },
                          "appSettings": {
                            "value": "[parameters('appSettings')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "16930852302813854027"
                            },
                            "description": "Updates app settings for an Azure App Service."
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the app service resource within the current resource group scope"
                              }
                            },
                            "appSettings": {
                              "type": "secureObject",
                              "metadata": {
                                "description": "The app settings to be applied to the app service"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/config",
                              "apiVersion": "2022-03-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'appsettings')]",
                              "properties": "[parameters('appSettings')]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('solutionName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "identityPrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Web/sites', parameters('solutionName')), '2020-06-01', 'full').identity.principalId]"
                    },
                    "appUrl": {
                      "type": "string",
                      "value": "[format('https://{0}.azurewebsites.net', parameters('solutionName'))]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[not(empty(parameters('azureExistingAIProjectResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "existing_foundry_project",
              "subscriptionId": "[variables('existingAIServiceSubscription')]",
              "resourceGroup": "[variables('existingAIServiceResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aiServicesName": {
                    "value": "[variables('existingAIServicesName')]"
                  },
                  "aiProjectName": {
                    "value": "[variables('existingAIProjectName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "12205957099854323574"
                    }
                  },
                  "parameters": {
                    "aiServicesName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the existing Azure AI Services account"
                      }
                    },
                    "aiProjectName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the existing AI Project under the AI Services account"
                      }
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').location]"
                    },
                    "skuName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').sku.name]"
                    },
                    "kind": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').kind]"
                    },
                    "allowProjectManagement": {
                      "type": "bool",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').allowProjectManagement]"
                    },
                    "customSubDomainName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').customSubDomainName]"
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').publicNetworkAccess]"
                    },
                    "defaultNetworkAction": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').networkAcls.defaultAction]"
                    },
                    "ipRules": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').networkAcls.ipRules]"
                    },
                    "vnetRules": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview').networkAcls.virtualNetworkRules]"
                    },
                    "projectLocation": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').location]"
                    },
                    "projectKind": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').kind]"
                    },
                    "projectProvisioningState": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview').provisioningState]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "assignAiUserRoleToAiProject",
              "subscriptionId": "[variables('existingAIServiceSubscription')]",
              "resourceGroup": "[variables('existingAIServiceResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-app-module', parameters('name'))), '2022-09-01').outputs.identityPrincipalId.value]"
                  },
                  "roleDefinitionId": {
                    "value": "[resourceId('Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d')]"
                  },
                  "roleAssignmentName": {
                    "value": "[guid(format('{0}-app-module', parameters('name')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), resourceId('Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d'))]"
                  },
                  "aiServicesName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), createObject('value', variables('existingAIServicesName')), createObject('value', parameters('aiServicesName')))]",
                  "aiProjectName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), createObject('value', split(parameters('azureExistingAIProjectResourceId'), '/')[10]), createObject('value', ''))]",
                  "enableSystemAssignedIdentity": {
                    "value": false
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "7452802017248155173"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "roleDefinitionId": {
                      "type": "string"
                    },
                    "roleAssignmentName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "aiServicesName": {
                      "type": "string"
                    },
                    "aiProjectName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "aiLocation": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "aiKind": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "aiSkuName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "enableSystemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "customSubDomainName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "defaultNetworkAction": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "vnetRules": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "ipRules": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "aiModelDeployments": {
                      "type": "array",
                      "defaultValue": []
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableSystemAssignedIdentity')]",
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[parameters('aiServicesName')]",
                      "location": "[parameters('aiLocation')]",
                      "kind": "[parameters('aiKind')]",
                      "sku": {
                        "name": "[parameters('aiSkuName')]"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "allowProjectManagement": true,
                        "customSubDomainName": "[parameters('customSubDomainName')]",
                        "networkAcls": {
                          "defaultAction": "[parameters('defaultNetworkAction')]",
                          "virtualNetworkRules": "[parameters('vnetRules')]",
                          "ipRules": "[parameters('ipRules')]"
                        },
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "aiServicesDeployments",
                        "count": "[length(parameters('aiModelDeployments'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[not(empty(parameters('aiModelDeployments')))]",
                      "type": "Microsoft.CognitiveServices/accounts/deployments",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[format('{0}/{1}', parameters('aiServicesName'), parameters('aiModelDeployments')[copyIndex()].name)]",
                      "properties": {
                        "model": {
                          "format": "OpenAI",
                          "name": "[parameters('aiModelDeployments')[copyIndex()].model]"
                        },
                        "raiPolicyName": "[parameters('aiModelDeployments')[copyIndex()].raiPolicyName]"
                      },
                      "sku": {
                        "name": "[parameters('aiModelDeployments')[copyIndex()].sku.name]",
                        "capacity": "[parameters('aiModelDeployments')[copyIndex()].sku.capacity]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                      ]
                    },
                    {
                      "condition": "[and(not(empty(parameters('aiProjectName'))), parameters('enableSystemAssignedIdentity'))]",
                      "type": "Microsoft.CognitiveServices/accounts/projects",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[format('{0}/{1}', parameters('aiServicesName'), parameters('aiProjectName'))]",
                      "location": "[parameters('aiLocation')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {},
                      "dependsOn": [
                        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableSystemAssignedIdentity')]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
                      "name": "[parameters('roleAssignmentName')]",
                      "properties": {
                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                      ]
                    },
                    {
                      "condition": "[not(parameters('enableSystemAssignedIdentity'))]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
                      "name": "[parameters('roleAssignmentName')]",
                      "properties": {
                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ],
                  "outputs": {
                    "aiServicesPrincipalId": {
                      "type": "string",
                      "value": "[if(parameters('enableSystemAssignedIdentity'), reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').identity.principalId, reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').identity.principalId)]"
                    },
                    "aiProjectPrincipalId": {
                      "type": "string",
                      "value": "[if(not(empty(parameters('aiProjectName'))), if(parameters('enableSystemAssignedIdentity'), reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').identity.principalId, reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').identity.principalId), '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('{0}-app-module', parameters('name')))]"
              ]
            }
          ],
          "outputs": {
            "appUrl": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-app-module', parameters('name'))), '2022-09-01').outputs.appUrl.value]"
            },
            "reactAppLayoutConfig": {
              "type": "string",
              "value": "[variables('reactAppLayoutConfig')]"
            },
            "appInsightInstrumentationKey": {
              "type": "string",
              "value": "[reference(parameters('applicationInsightsId'), '2015-05-01').InstrumentationKey]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry')]",
        "[resourceId('Microsoft.Resources/deployments', 'run_agent_scripts')]",
        "[resourceId('Microsoft.Resources/deployments', 'deploy_app_service_plan')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_frontend_docker",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}{1}', variables('abbrs').compute.webApp, variables('solutionPrefix'))]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "imageTag": {
            "value": "[parameters('imageTag')]"
          },
          "acrName": {
            "value": "[variables('acrName')]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_app_service_plan'), '2022-09-01').outputs.name.value]"
          },
          "applicationInsightsId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.applicationInsightsId.value]"
          },
          "appSettings": {
            "value": {
              "APP_API_BASE_URL": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_backend_docker'), '2022-09-01').outputs.appUrl.value]"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "12746343700329661086"
            }
          },
          "parameters": {
            "imageTag": {
              "type": "string"
            },
            "acrName": {
              "type": "string"
            },
            "applicationInsightsId": {
              "type": "string"
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Solution Location"
              }
            },
            "appSettings": {
              "type": "secureObject",
              "defaultValue": {}
            },
            "appServicePlanId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "variables": {
            "imageName": "[format('DOCKER|{0}.azurecr.io/da-app:{1}', parameters('acrName'), parameters('imageTag'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-app-module', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "solutionLocation": {
                    "value": "[parameters('solutionLocation')]"
                  },
                  "solutionName": {
                    "value": "[parameters('name')]"
                  },
                  "appServicePlanId": {
                    "value": "[parameters('appServicePlanId')]"
                  },
                  "appImageName": {
                    "value": "[variables('imageName')]"
                  },
                  "appSettings": {
                    "value": "[union(parameters('appSettings'), createObject('APPINSIGHTS_INSTRUMENTATIONKEY', reference(parameters('applicationInsightsId'), '2015-05-01').InstrumentationKey))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "17046884165398746428"
                    }
                  },
                  "parameters": {
                    "solutionName": {
                      "type": "string",
                      "metadata": {
                        "description": "Solution Name"
                      }
                    },
                    "solutionLocation": {
                      "type": "string",
                      "metadata": {
                        "description": "Solution Location"
                      }
                    },
                    "appSettings": {
                      "type": "secureObject",
                      "defaultValue": {}
                    },
                    "appServicePlanId": {
                      "type": "string"
                    },
                    "appImageName": {
                      "type": "string"
                    },
                    "userassignedIdentityId": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('solutionName'), 'ftp')]",
                      "properties": {
                        "allow": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('solutionName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('solutionName'), 'scm')]",
                      "properties": {
                        "allow": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('solutionName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('solutionName')]",
                      "location": "[parameters('solutionLocation')]",
                      "identity": "[if(equals(parameters('userassignedIdentityId'), ''), createObject('type', 'SystemAssigned'), createObject('type', 'SystemAssigned, UserAssigned', 'userAssignedIdentities', createObject(format('{0}', parameters('userassignedIdentityId')), createObject())))]",
                      "properties": {
                        "serverFarmId": "[parameters('appServicePlanId')]",
                        "siteConfig": {
                          "alwaysOn": true,
                          "ftpsState": "Disabled",
                          "linuxFxVersion": "[parameters('appImageName')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('solutionName'), 'logs')]",
                      "properties": {
                        "applicationLogs": {
                          "fileSystem": {
                            "level": "Verbose"
                          }
                        },
                        "detailedErrorMessages": {
                          "enabled": true
                        },
                        "failedRequestsTracing": {
                          "enabled": true
                        },
                        "httpLogs": {
                          "fileSystem": {
                            "enabled": true,
                            "retentionInDays": 1,
                            "retentionInMb": 35
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('solutionName'))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-appSettings', parameters('solutionName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-appSettings', parameters('solutionName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('solutionName')]"
                          },
                          "appSettings": {
                            "value": "[parameters('appSettings')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "16930852302813854027"
                            },
                            "description": "Updates app settings for an Azure App Service."
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the app service resource within the current resource group scope"
                              }
                            },
                            "appSettings": {
                              "type": "secureObject",
                              "metadata": {
                                "description": "The app settings to be applied to the app service"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/config",
                              "apiVersion": "2022-03-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'appsettings')]",
                              "properties": "[parameters('appSettings')]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('solutionName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "identityPrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Web/sites', parameters('solutionName')), '2020-06-01', 'full').identity.principalId]"
                    },
                    "appUrl": {
                      "type": "string",
                      "value": "[format('https://{0}.azurewebsites.net', parameters('solutionName'))]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "appUrl": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-app-module', parameters('name'))), '2022-09-01').outputs.appUrl.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_backend_docker')]",
        "[resourceId('Microsoft.Resources/deployments', 'deploy_app_service_plan')]"
      ]
    }
  ],
  "outputs": {
    "SOLUTION_NAME": {
      "type": "string",
      "value": "[variables('solutionPrefix')]"
    },
    "RESOURCE_GROUP_NAME": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "RESOURCE_GROUP_LOCATION": {
      "type": "string",
      "value": "[variables('solutionLocation')]"
    },
    "ENVIRONMENT_NAME": {
      "type": "string",
      "value": "[parameters('environmentName')]"
    },
    "AZURE_CONTENT_UNDERSTANDING_LOCATION": {
      "type": "string",
      "value": "[variables('contentUnderstandingLocation')]"
    },
    "AZURE_SECONDARY_LOCATION": {
      "type": "string",
      "value": "[parameters('secondaryLocation')]"
    },
    "APPINSIGHTS_INSTRUMENTATIONKEY": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_backend_docker'), '2022-09-01').outputs.appInsightInstrumentationKey.value]"
    },
    "AZURE_AI_PROJECT_CONN_STRING": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.projectEndpoint.value]"
    },
    "AZURE_AI_AGENT_API_VERSION": {
      "type": "string",
      "value": "[parameters('azureAiAgentApiVersion')]"
    },
    "AZURE_AI_PROJECT_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiProjectName.value]"
    },
    "AZURE_OPENAI_DEPLOYMENT_MODEL": {
      "type": "string",
      "value": "[parameters('gptModelName')]"
    },
    "AZURE_OPENAI_DEPLOYMENT_MODEL_CAPACITY": {
      "type": "int",
      "value": "[parameters('gptDeploymentCapacity')]"
    },
    "AZURE_OPENAI_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiServicesTarget.value]"
    },
    "AZURE_OPENAI_MODEL_DEPLOYMENT_TYPE": {
      "type": "string",
      "value": "[parameters('deploymentType')]"
    },
    "AZURE_OPENAI_EMBEDDING_MODEL": {
      "type": "string",
      "value": "[parameters('embeddingModel')]"
    },
    "AZURE_OPENAI_EMBEDDING_MODEL_CAPACITY": {
      "type": "int",
      "value": "[parameters('embeddingDeploymentCapacity')]"
    },
    "AZURE_OPENAI_API_VERSION": {
      "type": "string",
      "value": "[parameters('azureOpenAIApiVersion')]"
    },
    "AZURE_OPENAI_RESOURCE": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiServicesName.value]"
    },
    "REACT_APP_LAYOUT_CONFIG": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_backend_docker'), '2022-09-01').outputs.reactAppLayoutConfig.value]"
    },
    "API_UID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityBackendAppOutput.value.clientId]"
    },
    "USE_AI_PROJECT_CLIENT": {
      "type": "string",
      "value": "False"
    },
    "USE_CHAT_HISTORY_ENABLED": {
      "type": "string",
      "value": "True"
    },
    "DISPLAY_CHART_DEFAULT": {
      "type": "string",
      "value": "False"
    },
    "AZURE_AI_AGENT_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.projectEndpoint.value]"
    },
    "AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME": {
      "type": "string",
      "value": "[parameters('gptModelName')]"
    },
    "ACR_NAME": {
      "type": "string",
      "value": "[variables('acrName')]"
    },
    "AZURE_ENV_IMAGETAG": {
      "type": "string",
      "value": "[parameters('imageTag')]"
    },
    "API_APP_URL": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_backend_docker'), '2022-09-01').outputs.appUrl.value]"
    },
    "WEB_APP_URL": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_frontend_docker'), '2022-09-01').outputs.appUrl.value]"
    },
    "APPLICATIONINSIGHTS_CONNECTION_STRING": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.applicationInsightsConnectionString.value]"
    },
    "AGENT_ID_ORCHESTRATOR": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'run_agent_scripts'), '2022-09-01').outputs.orchestratorAgentId.value]"
    },
    "AGENT_ID_SQL": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'run_agent_scripts'), '2022-09-01').outputs.sqlAgentId.value]"
    },
    "AGENT_ID_CHART": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'run_agent_scripts'), '2022-09-01').outputs.chartAgentId.value]"
    },
    "FABRIC_SQL_DATABASE": {
      "type": "string",
      "value": ""
    },
    "FABRIC_SQL_SERVER": {
      "type": "string",
      "value": ""
    },
    "FABRIC_SQL_CONNECTION_STRING": {
      "type": "string",
      "value": ""
    }
  }
}