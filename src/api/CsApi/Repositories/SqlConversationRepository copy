using System.Data;
using System.Data.Odbc;
using Microsoft.Data.SqlClient;
using Microsoft.Identity.Client;
using CsApi.Models;
using Azure.Identity;
using Azure.Core;
using System.Threading.Tasks;

namespace CsApi.Repositories;

public interface ISqlConversationRepository
{
    Task<string> EnsureConversationAsync(string userId, string? conversationId, string title, CancellationToken ct);
    Task AddMessageAsync(string userId, string conversationId, ChatMessage message, CancellationToken ct);
    Task<IReadOnlyList<ConversationSummary>> ListAsync(string userId, int offset, int limit, string sortOrder, CancellationToken ct);
    Task<IReadOnlyList<ChatMessage>> ReadAsync(string userId, string conversationId, string sortOrder, CancellationToken ct);
    Task<bool> DeleteAsync(string userId, string conversationId, CancellationToken ct);
    Task<int> DeleteAllAsync(string userId, CancellationToken ct);
    Task<bool> RenameAsync(string userId, string conversationId, string title, CancellationToken ct);
}

public class SqlConversationRepository : ISqlConversationRepository
{
    private readonly IConfiguration _config;
    private readonly ILogger<SqlConversationRepository> _logger;

    public SqlConversationRepository(IConfiguration config, ILogger<SqlConversationRepository> logger)
    { _config = config; _logger = logger; }

    private async Task<IDbConnection> CreateConnectionAsync()
    {
        var appEnv = Environment.GetEnvironmentVariable("APP_ENV")?.ToLower() ?? "prod";

        // In prod, fall back to connection string from config (if needed)
        if (appEnv == "prod")
        {
            var cs = _config["FABRIC_SQL_CONNECTION_STRING"];
            var sqlConn = new SqlConnection(cs);
            await sqlConn.OpenAsync();
            Console.WriteLine("✅ Connected to Fabric SQL using connection string.");
            return sqlConn;
        }

        // In dev, use Azure AD authentication (no username/password required)
        var db = _config["FABRIC_SQL_DATABASE"];
        var server = _config["FABRIC_SQL_SERVER"];

        Console.WriteLine($"Using Azure CLI/Azure AD authentication for {server}, database {db}");

        var connectionString =
            $"Server=tcp:{server},1433;" +
            $"Database={db};" +
            "Encrypt=True;" +
            "TrustServerCertificate=False;";

        var credential = new DefaultAzureCredential();
        var token = await credential.GetTokenAsync(
            new TokenRequestContext(new[] { "https://database.windows.net/.default" }));

        var sqlConnWithToken = new SqlConnection(connectionString)
        {
            AccessToken = token.Token
        };

        await sqlConnWithToken.OpenAsync();
        Console.WriteLine("✅ Connected to Fabric SQL using Azure Identity (no username/password).");

        return sqlConnWithToken;

    }

    // Helper to create command for either connection type
    private IDbCommand CreateCommand(string sql, IDbConnection conn)
    {
        if (conn is SqlConnection)
            return new SqlCommand(sql, (SqlConnection)conn);
        else if (conn is OdbcConnection)
            return new OdbcCommand(sql, (OdbcConnection)conn);
        throw new InvalidOperationException("Unsupported connection type");
    }

    public async Task<string> EnsureConversationAsync(string userId, string? conversationId, string title, CancellationToken ct)
    {
        var id = conversationId ?? Guid.NewGuid().ToString();
        const string existsSql = "SELECT conversation_id FROM hst_conversations WHERE conversation_id=? AND userId=?";
        using var conn = await CreateConnectionAsync();
        IDbCommand check;
        if (conn is SqlConnection sqlConn)
            check = new SqlCommand(existsSql, sqlConn);
        else if (conn is OdbcConnection odbcConn)
            check = new OdbcCommand(existsSql, odbcConn);
        else
            throw new InvalidOperationException("Unsupported connection type");
        if (conn is SqlConnection)
        {
            ((SqlCommand)check).Parameters.Add(new SqlParameter { ParameterName = "@c", Value = id });
            ((SqlCommand)check).Parameters.Add(new SqlParameter { ParameterName = "@u", Value = userId });
        }
        else
        {
            ((OdbcCommand)check).Parameters.Add(new OdbcParameter { Value = id });
            ((OdbcCommand)check).Parameters.Add(new OdbcParameter { Value = userId });
        }
        var found = check.ExecuteScalar();
        if (found != null) return id;
        const string insertSql = "INSERT INTO hst_conversations (userId, conversation_id, title, createdAt, updatedAt) VALUES (?,?,?,?,?)";
        var now = DateTime.UtcNow.ToString("o");
        IDbCommand cmd;
        if (conn is SqlConnection sqlConn2)
            cmd = new SqlCommand(insertSql, sqlConn2);
        else if (conn is OdbcConnection odbcConn2)
            cmd = new OdbcCommand(insertSql, odbcConn2);
        else
            throw new InvalidOperationException("Unsupported connection type");
        if (conn is SqlConnection)
        {
            ((SqlCommand)cmd).Parameters.Add(new SqlParameter { ParameterName = "@u", Value = userId });
            ((SqlCommand)cmd).Parameters.Add(new SqlParameter { ParameterName = "@c", Value = id });
            ((SqlCommand)cmd).Parameters.Add(new SqlParameter { ParameterName = "@t", Value = title ?? string.Empty });
            ((SqlCommand)cmd).Parameters.Add(new SqlParameter { ParameterName = "@n", Value = now });
            ((SqlCommand)cmd).Parameters.Add(new SqlParameter { ParameterName = "@n", Value = now });
        }
        else
        {
            ((OdbcCommand)cmd).Parameters.Add(new OdbcParameter { Value = userId });
            ((OdbcCommand)cmd).Parameters.Add(new OdbcParameter { Value = id });
            ((OdbcCommand)cmd).Parameters.Add(new OdbcParameter { Value = title ?? string.Empty });
            ((OdbcCommand)cmd).Parameters.Add(new OdbcParameter { Value = now });
            ((OdbcCommand)cmd).Parameters.Add(new OdbcParameter { Value = now });
        }
        cmd.ExecuteNonQuery();
        return id;
    }

    public async Task AddMessageAsync(string userId, string conversationId, ChatMessage message, CancellationToken ct)
    {
        const string sql = @"INSERT INTO hst_conversation_messages (userId, conversation_id, role, content_id, content, citations, feedback, createdAt, updatedAt) 
VALUES (?,?,?,?,?,\'[]\',\'',?,?); UPDATE hst_conversations SET updatedAt=? WHERE conversation_id=?;";
        var now = DateTime.UtcNow.ToString("o");
        using var conn = await CreateConnectionAsync();
        IDbCommand cmd;
        if (conn is SqlConnection sqlConn)
            cmd = new SqlCommand(sql, sqlConn);
        else if (conn is OdbcConnection odbcConn)
            cmd = new OdbcCommand(sql, odbcConn);
        else
            throw new InvalidOperationException("Unsupported connection type");
        if (conn is SqlConnection)
        {
            ((SqlCommand)cmd).Parameters.AddWithValue("", userId);
            ((SqlCommand)cmd).Parameters.AddWithValue("", conversationId);
            ((SqlCommand)cmd).Parameters.AddWithValue("", message.Role);
            ((SqlCommand)cmd).Parameters.AddWithValue("", message.Id);
            ((SqlCommand)cmd).Parameters.AddWithValue("", message.Content ?? string.Empty);
            ((SqlCommand)cmd).Parameters.AddWithValue("", now);
            ((SqlCommand)cmd).Parameters.AddWithValue("", now);
            ((SqlCommand)cmd).Parameters.AddWithValue("", now);
            ((SqlCommand)cmd).Parameters.AddWithValue("", conversationId);
        }
        else
        {
            ((OdbcCommand)cmd).Parameters.AddWithValue("", userId);
            ((OdbcCommand)cmd).Parameters.AddWithValue("", conversationId);
            ((OdbcCommand)cmd).Parameters.AddWithValue("", message.Role);
            ((OdbcCommand)cmd).Parameters.AddWithValue("", message.Id);
            ((OdbcCommand)cmd).Parameters.AddWithValue("", message.Content ?? string.Empty);
            ((OdbcCommand)cmd).Parameters.AddWithValue("", now);
            ((OdbcCommand)cmd).Parameters.AddWithValue("", now);
            ((OdbcCommand)cmd).Parameters.AddWithValue("", now);
            ((OdbcCommand)cmd).Parameters.AddWithValue("", conversationId);
        }
        cmd.ExecuteNonQuery();
    }

    public async Task<IReadOnlyList<ConversationSummary>> ListAsync(string userId, int offset, int limit, string sortOrder, CancellationToken ct)
    {
        var list = new List<ConversationSummary>();
        try
        {
            var order = sortOrder.Equals("asc", StringComparison.OrdinalIgnoreCase) ? "ASC" : "DESC";
            using var conn = await CreateConnectionAsync();
            IDbCommand cmd;
            if (conn is SqlConnection)
            {
                //var sql = "SELECT conversation_id, title, updatedAt FROM hst_conversations WHERE userId=@userId ORDER BY updatedAt " + order + " OFFSET @offset ROWS FETCH NEXT @limit ROWS ONLY";
                var sql = "SELECT conversation_id, title, createdAt, updatedAt FROM hst_conversations ORDER BY updatedAt " + order ;
                cmd = new SqlCommand(sql, (SqlConnection)conn);
                //((SqlCommand)cmd).Parameters.AddWithValue("@userId", userId);
                //((SqlCommand)cmd).Parameters.AddWithValue("@offset", offset);
                //((SqlCommand)cmd).Parameters.AddWithValue("@limit", limit);
            }
            else if (conn is OdbcConnection)
            {
                // ODBC does not support OFFSET/FETCH syntax in the same way, so use LIMIT for compatible drivers
                var sql = "SELECT conversation_id, title, updatedAt FROM hst_conversations WHERE userId=? ORDER BY updatedAt " + order + " LIMIT ?";
                cmd = new OdbcCommand(sql, (OdbcConnection)conn);
                ((OdbcCommand)cmd).Parameters.AddWithValue("", userId);
                ((OdbcCommand)cmd).Parameters.AddWithValue("", limit);
            }
            else
            {
                throw new InvalidOperationException("Unsupported connection type");
            }

            using var reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                list.Add(new ConversationSummary
                {
                    ConversationId = reader.GetString(0),
                    Title = reader.GetString(1),
                    UpdatedAt = reader.GetDateTime(2)
                });
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error listing conversations for user {UserId}", userId);
        }
        return list;
    }

    public async Task<IReadOnlyList<ChatMessage>> ReadAsync(string userId, string conversationId, string sortOrder, CancellationToken ct)
    {
        var order = sortOrder.Equals("asc", StringComparison.OrdinalIgnoreCase) ? "ASC" : "DESC";
        var sql = $"SELECT content_id, role, content, createdAt FROM hst_conversation_messages WHERE userId=? AND conversation_id=? ORDER BY updatedAt {order}";
        var list = new List<ChatMessage>();
        using var conn = await CreateConnectionAsync();
        IDbCommand cmd;
        if (conn is SqlConnection sqlConn)
            cmd = new SqlCommand(sql, sqlConn);
        else if (conn is OdbcConnection odbcConn)
            cmd = new OdbcCommand(sql, odbcConn);
        else
            throw new InvalidOperationException("Unsupported connection type");
        if (conn is SqlConnection)
        {
            ((SqlCommand)cmd).Parameters.AddWithValue("", userId);
            ((SqlCommand)cmd).Parameters.AddWithValue("", conversationId);
        }
        else
        {
            ((OdbcCommand)cmd).Parameters.AddWithValue("", userId);
            ((OdbcCommand)cmd).Parameters.AddWithValue("", conversationId);
        }
        using var reader = cmd.ExecuteReader();
        while (reader.Read())
        {
            list.Add(new ChatMessage
            {
                Id = reader.GetString(0),
                Role = reader.GetString(1),
                Content = reader.GetString(2),
                CreatedAt = DateTime.Parse(reader.GetString(3))
            });
        }
        return list;
    }

    public async Task<bool> DeleteAsync(string userId, string conversationId, CancellationToken ct)
    {
        const string sql = "DELETE FROM hst_conversation_messages WHERE userId=? AND conversation_id=?; DELETE FROM hst_conversations WHERE userId=? AND conversation_id=?;";
        using var conn = await CreateConnectionAsync();
        IDbCommand cmd;
        if (conn is SqlConnection sqlConn)
            cmd = new SqlCommand(sql, sqlConn);
        else if (conn is OdbcConnection odbcConn)
            cmd = new OdbcCommand(sql, odbcConn);
        else
            throw new InvalidOperationException("Unsupported connection type");
        if (conn is SqlConnection)
        {
            ((SqlCommand)cmd).Parameters.AddWithValue("", userId); ((SqlCommand)cmd).Parameters.AddWithValue("", conversationId);
            ((SqlCommand)cmd).Parameters.AddWithValue("", userId); ((SqlCommand)cmd).Parameters.AddWithValue("", conversationId);
        }
        else
        {
            ((OdbcCommand)cmd).Parameters.AddWithValue("", userId); ((OdbcCommand)cmd).Parameters.AddWithValue("", conversationId);
            ((OdbcCommand)cmd).Parameters.AddWithValue("", userId); ((OdbcCommand)cmd).Parameters.AddWithValue("", conversationId);
        }
        var rows = cmd.ExecuteNonQuery();
        return rows > 0;
    }

    public async Task<int> DeleteAllAsync(string userId, CancellationToken ct)
    {
        const string sql = "DELETE FROM hst_conversation_messages WHERE userId=?; DELETE FROM hst_conversations WHERE userId=?;";
        using var conn = await CreateConnectionAsync();
        IDbCommand cmd;
        if (conn is SqlConnection sqlConn)
            cmd = new SqlCommand(sql, sqlConn);
        else if (conn is OdbcConnection odbcConn)
            cmd = new OdbcCommand(sql, odbcConn);
        else
            throw new InvalidOperationException("Unsupported connection type");
        if (conn is SqlConnection)
        {
            ((SqlCommand)cmd).Parameters.AddWithValue("", userId);
            ((SqlCommand)cmd).Parameters.AddWithValue("", userId);
        }
        else
        {
            ((OdbcCommand)cmd).Parameters.AddWithValue("", userId);
            ((OdbcCommand)cmd).Parameters.AddWithValue("", userId);
        }
        return cmd.ExecuteNonQuery();
    }

    public async Task<bool> RenameAsync(string userId, string conversationId, string title, CancellationToken ct)
    {
        const string sql = "UPDATE hst_conversations SET title=?, updatedAt=? WHERE userId=? AND conversation_id=?";
        using var conn = await CreateConnectionAsync();
        IDbCommand cmd;
        if (conn is SqlConnection sqlConn)
            cmd = new SqlCommand(sql, sqlConn);
        else if (conn is OdbcConnection odbcConn)
            cmd = new OdbcCommand(sql, odbcConn);
        else
            throw new InvalidOperationException("Unsupported connection type");
        if (conn is SqlConnection)
        {
            ((SqlCommand)cmd).Parameters.AddWithValue("", title);
            ((SqlCommand)cmd).Parameters.AddWithValue("", DateTime.UtcNow.ToString("o"));
            ((SqlCommand)cmd).Parameters.AddWithValue("", userId);
            ((SqlCommand)cmd).Parameters.AddWithValue("", conversationId);
        }
        else
        {
            ((OdbcCommand)cmd).Parameters.AddWithValue("", title);
            ((OdbcCommand)cmd).Parameters.AddWithValue("", DateTime.UtcNow.ToString("o"));
            ((OdbcCommand)cmd).Parameters.AddWithValue("", userId);
            ((OdbcCommand)cmd).Parameters.AddWithValue("", conversationId);
        }
        return cmd.ExecuteNonQuery() > 0;
    }
}
